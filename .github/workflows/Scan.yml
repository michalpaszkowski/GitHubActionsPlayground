name: Avoid LLVM pointer element type APIs

on:
  pull_request:

jobs:
  scan-for-banned-words:
    runs-on: ubuntu-latest
    steps:
    - name: Fetch pull request diff
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PR_NUMBER: ${{ github.event.pull_request.number }}
        OWNER_AND_REPO: ${{ github.repository }}
      run: |
        curl -s -H "Accept: application/vnd.github.v3.diff" \
             -H "Authorization: token $GITHUB_TOKEN" \
             "https://api.github.com/repos/$OWNER_AND_REPO/pulls/$PR_NUMBER" > pr.diff

    - name: Scan for LLVM pointer element type APIs
      run: |
        import sys

        # Banned LLVM pointer element type APIs
        pointer_element_type_API_method_names = ["getPointerElementType", "getNonOpaquePtrEltTy", "getNonOpaquePointerElementType"]

        found = False

        current_file = ""
        process_file = False

        cpp_extensions = ('.cpp', '.cxx', '.cc', '.c', '.c++', '.hpp', '.h', '.hxx', '.hh', '.h++')

        def tokenize(line):
            tokens = []
            current_word = ''
            for c in line:
                if c.isalnum() or c == '_':
                    current_word += c
                else:
                    if current_word:
                        tokens.append(current_word)
                        current_word = ''
            if current_word:
                tokens.append(current_word)
            return tokens

        with open('pr.diff', 'r', encoding='utf-8') as diff_file:
            for line in diff_file:
                line = line.rstrip('\n')

                # Check for diff headers to identify file changes
                if line.startswith('diff --git a/'):
                    # Extract current_file from the line
                    parts = line.split(' b/')
                    if len(parts) == 2:
                        current_file = parts[1]
                    else:
                        current_file = ''
                    process_file = False  # Reset processing flag until file extension is confirmed
                    continue

                # Check for lines indicating new or changed files
                if line.startswith('+++ b/'):
                    current_file = line[6:]  # Remove '+++ b/' prefix
                    # Process only C++ files
                    if current_file.endswith(cpp_extensions):
                        process_file = True
                    else:
                        process_file = False
                    continue

                if process_file:
                    if line.startswith('+') and not line.startswith('+++'):
                        added_line = line[1:]  # Remove the '+' sign
                        # Tokenize the added line into words
                        tokens = tokenize(added_line)
                        # Scan the added line for LLVM pointer element type API method names
                        for word in pointer_element_type_API_method_names:
                            if word in tokens:
                                print(f"Found a reference to LLVM pointer element type API '{word}' in the file '{current_file}':")
                                print(added_line)
                                found = True

        # Exit with error if any banned words were found
        if found:
            print("Please remove all references to typed pointer APIs before merging (see https://llvm.org/docs/OpaquePointers.html for transition tips).")
            sys.exit(1)
        else:
            print("No new LLVM typed pointer APIs found in the diff.")
      shell: python3 {0}
