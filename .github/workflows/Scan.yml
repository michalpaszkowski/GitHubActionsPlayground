name: Scan PR for Banned Words in C++ Files

on:
  pull_request:

jobs:
  scan-for-banned-words:
    runs-on: ubuntu-latest
    steps:
    - name: Fetch PR diff
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PR_NUMBER: ${{ github.event.pull_request.number }}
        OWNER: ${{ github.repository.owner.login }}
        REPO: ${{ github.event.repository.name }}
      run: |
        curl -s -H "Accept: application/vnd.github.v3.diff" \
             -H "Authorization: token $GITHUB_TOKEN" \
             "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}" > pr.diff

    - name: Scan for banned words in PR diff (C++ files only)
      run: |
        import sys

        # Define the list of banned words
        banned_words = ["foo", "bar"]
        error_found = False

        # Initialize variables
        current_file = ""
        process_file = False

        # List of C++ file extensions
        cpp_extensions = ('.cpp', '.cxx', '.cc', '.c', '.hpp', '.h', '.hxx', '.hh')

        # Function to tokenize a line into words without using regex
        def tokenize(line):
            tokens = []
            current_word = ''
            for c in line:
                if c.isalnum() or c == '_':
                    current_word += c
                else:
                    if current_word:
                        tokens.append(current_word)
                        current_word = ''
            if current_word:
                tokens.append(current_word)
            return tokens

        # Open and read the diff file
        with open('pr.diff', 'r', encoding='utf-8') as diff_file:
            for line in diff_file:
                line = line.rstrip('\n')

                # Check for diff headers to identify file changes
                if line.startswith('diff --git a/'):
                    # Extract current_file from the line
                    parts = line.split(' b/')
                    if len(parts) == 2:
                        current_file = parts[1]
                    else:
                        current_file = ''
                    process_file = False  # Reset processing flag until file extension is confirmed
                    continue

                # Check for lines indicating new or changed files
                if line.startswith('+++ b/'):
                    current_file = line[6:]  # Remove '+++ b/' prefix
                    # Check if the file has a C++ extension
                    if current_file.endswith(cpp_extensions):
                        process_file = True
                    else:
                        process_file = False
                    continue

                # Process added lines if the file is a C++ file
                if process_file:
                    if line.startswith('+') and not line.startswith('+++'):
                        added_line = line[1:]  # Remove the '+' sign
                        # Tokenize the added line into words
                        tokens = tokenize(added_line)
                        # Scan the added line for banned words
                        for word in banned_words:
                            if word in tokens:
                                print(f"❌ Found banned word '{word}' in file '{current_file}':")
                                print(added_line)
                                error_found = True

        # Exit with error if any banned words were found
        if error_found:
            sys.exit(1)
        else:
            print("✅ No banned words found in added or changed lines of C++ files.")
      shell: python3 {0}
